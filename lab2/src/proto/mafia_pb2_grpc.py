# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.mafia_pb2 as mafia__pb2


class MafiaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add_user = channel.unary_unary(
                '/mafiaservice.Mafia/add_user',
                request_serializer=mafia__pb2.AddUserRequest.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.delete_user = channel.unary_unary(
                '/mafiaservice.Mafia/delete_user',
                request_serializer=mafia__pb2.BaseUserRequest.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.get_users = channel.unary_unary(
                '/mafiaservice.Mafia/get_users',
                request_serializer=mafia__pb2.Empty.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.get_role = channel.unary_unary(
                '/mafiaservice.Mafia/get_role',
                request_serializer=mafia__pb2.BaseUserRequest.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.help = channel.unary_unary(
                '/mafiaservice.Mafia/help',
                request_serializer=mafia__pb2.Empty.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.exit = channel.unary_unary(
                '/mafiaservice.Mafia/exit',
                request_serializer=mafia__pb2.BaseUserRequest.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.vote_user = channel.unary_unary(
                '/mafiaservice.Mafia/vote_user',
                request_serializer=mafia__pb2.VoteUserRequest.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.finish_day = channel.unary_unary(
                '/mafiaservice.Mafia/finish_day',
                request_serializer=mafia__pb2.BaseUserRequest.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.verify = channel.unary_unary(
                '/mafiaservice.Mafia/verify',
                request_serializer=mafia__pb2.BaseUserRequest.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )
        self.init_communication_channel = channel.stream_stream(
                '/mafiaservice.Mafia/init_communication_channel',
                request_serializer=mafia__pb2.CommunicationRequest.SerializeToString,
                response_deserializer=mafia__pb2.CommunicationResponse.FromString,
                )
        self.get_valid_actions = channel.unary_unary(
                '/mafiaservice.Mafia/get_valid_actions',
                request_serializer=mafia__pb2.BaseUserRequest.SerializeToString,
                response_deserializer=mafia__pb2.Response.FromString,
                )


class MafiaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def add_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_users(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_role(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def help(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vote_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finish_day(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def verify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def init_communication_channel(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_valid_actions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add_user': grpc.unary_unary_rpc_method_handler(
                    servicer.add_user,
                    request_deserializer=mafia__pb2.AddUserRequest.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'delete_user': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_user,
                    request_deserializer=mafia__pb2.BaseUserRequest.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'get_users': grpc.unary_unary_rpc_method_handler(
                    servicer.get_users,
                    request_deserializer=mafia__pb2.Empty.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'get_role': grpc.unary_unary_rpc_method_handler(
                    servicer.get_role,
                    request_deserializer=mafia__pb2.BaseUserRequest.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'help': grpc.unary_unary_rpc_method_handler(
                    servicer.help,
                    request_deserializer=mafia__pb2.Empty.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'exit': grpc.unary_unary_rpc_method_handler(
                    servicer.exit,
                    request_deserializer=mafia__pb2.BaseUserRequest.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'vote_user': grpc.unary_unary_rpc_method_handler(
                    servicer.vote_user,
                    request_deserializer=mafia__pb2.VoteUserRequest.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'finish_day': grpc.unary_unary_rpc_method_handler(
                    servicer.finish_day,
                    request_deserializer=mafia__pb2.BaseUserRequest.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'verify': grpc.unary_unary_rpc_method_handler(
                    servicer.verify,
                    request_deserializer=mafia__pb2.BaseUserRequest.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
            'init_communication_channel': grpc.stream_stream_rpc_method_handler(
                    servicer.init_communication_channel,
                    request_deserializer=mafia__pb2.CommunicationRequest.FromString,
                    response_serializer=mafia__pb2.CommunicationResponse.SerializeToString,
            ),
            'get_valid_actions': grpc.unary_unary_rpc_method_handler(
                    servicer.get_valid_actions,
                    request_deserializer=mafia__pb2.BaseUserRequest.FromString,
                    response_serializer=mafia__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mafiaservice.Mafia', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mafia(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def add_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/add_user',
            mafia__pb2.AddUserRequest.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/delete_user',
            mafia__pb2.BaseUserRequest.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_users(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/get_users',
            mafia__pb2.Empty.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_role(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/get_role',
            mafia__pb2.BaseUserRequest.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def help(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/help',
            mafia__pb2.Empty.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def exit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/exit',
            mafia__pb2.BaseUserRequest.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vote_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/vote_user',
            mafia__pb2.VoteUserRequest.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def finish_day(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/finish_day',
            mafia__pb2.BaseUserRequest.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def verify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/verify',
            mafia__pb2.BaseUserRequest.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def init_communication_channel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/mafiaservice.Mafia/init_communication_channel',
            mafia__pb2.CommunicationRequest.SerializeToString,
            mafia__pb2.CommunicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_valid_actions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafiaservice.Mafia/get_valid_actions',
            mafia__pb2.BaseUserRequest.SerializeToString,
            mafia__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
